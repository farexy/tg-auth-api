// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TG.Auth.Api.Db;
using TG.Core.App.Constants;

namespace TG.Auth.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TG.Auth.Api.Entities.ExternalAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("TgUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("tg_user_id");

                    b.HasKey("Id", "Type")
                        .HasName("pk_external_accounts");

                    b.HasIndex("TgUserId")
                        .HasDatabaseName("ix_external_accounts_tg_user_id");

                    b.ToTable("external_accounts");
                });

            modelBuilder.Entity("TG.Auth.Api.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AuthType")
                        .HasColumnType("integer")
                        .HasColumnName("auth_type");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration_time");

                    b.Property<DateTime>("IssuedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("issued_time");

                    b.Property<string>("RefreshSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_secret");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tokens_user_id");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("TG.Auth.Api.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<UserRoles[]>("Roles")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("roles");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Login")
                        .HasDatabaseName("ix_users_login");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TG.Auth.Api.Entities.ExternalAccount", b =>
                {
                    b.HasOne("TG.Auth.Api.Entities.User", "TgUser")
                        .WithMany()
                        .HasForeignKey("TgUserId")
                        .HasConstraintName("fk_external_accounts_users_tg_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TgUser");
                });

            modelBuilder.Entity("TG.Auth.Api.Entities.Token", b =>
                {
                    b.HasOne("TG.Auth.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_tokens_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
